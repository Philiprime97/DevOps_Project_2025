pipeline {
    agent any

    environment {
        HARBOR_URL       = '192.168.1.179:80'
        HARBOR_PROJECT   = 'devops'
        IMAGE_NAME       = 'myapp-b'
        IMAGE_TAG        = '1'
        CREDENTIALS_ID   = 'devops-test'
        CRED_NAME        = 'jenkins-creds'
    }

    stages {

        stage('Docker Info Check') {
            steps {
                sh 'docker info'
            }
        }

        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh """
                    cd docker && \
                    docker build -t ${HARBOR_URL.replace('http://', '')}/${HARBOR_PROJECT}/${IMAGE_NAME}:${IMAGE_TAG} .
                    """
                }
            }
        }

        stage('Login to Harbor') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${CREDENTIALS_ID}", usernameVariable: 'HARBOR_USER', passwordVariable: 'HARBOR_PASS')]) {
                    sh '''
                    echo $HARBOR_PASS | docker login ${HARBOR_URL} -u $HARBOR_USER --password-stdin
                    '''
                }
            }
        }

        stage('Push Image to Harbor') {
            steps {
                script {
                    sh """
                    docker push ${HARBOR_URL.replace('http://', '')}/${HARBOR_PROJECT}/${IMAGE_NAME}:${IMAGE_TAG}
                    """
                }
            }
        }

        stage('Delay Before Scan') {
            steps {
                echo "‚è≥ Waiting 10 seconds before triggering Harbor scan..."
                sleep(time: 10, unit: 'SECONDS')
            }
        }

        stage('Trigger Harbor Trivy Scan') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${CREDENTIALS_ID}", usernameVariable: 'HARBOR_USER', passwordVariable: 'HARBOR_PASS')]) {
                    sh '''
                    mkdir -p harbor-config
                    echo "credential-store:" > harbor-config/config.yaml
                    echo "  jenkins-creds:" >> harbor-config/config.yaml
                    echo "    url: ${HARBOR_URL}" >> harbor-config/config.yaml
                    echo "    username: ${HARBOR_USER}" >> harbor-config/config.yaml
                    echo "    password: ${HARBOR_PASS}" >> harbor-config/config.yaml
                    echo "current-credential-name: jenkins-creds" >> harbor-config/config.yaml

                    docker run --rm \
                      -v $(pwd)/harbor-config:/root/.config/harbor-cli \
                      registry.goharbor.io/harbor-cli/harbor-cli:latest \
                      artifact scan run ${HARBOR_PROJECT}/${IMAGE_NAME}:${IMAGE_TAG}
                    '''
                }
            }
        }

        stage('Wait for Scan Completion') {
            steps {
                echo "‚è≥ Waiting 30 seconds for Harbor scan to complete..."
                sleep(time: 30, unit: 'SECONDS')
            }
        }

        stage('Fetch Trivy Scan Report') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${CREDENTIALS_ID}", usernameVariable: 'HARBOR_USER', passwordVariable: 'HARBOR_PASS')]) {
                    sh '''
                    # Get scan status and output to file
                    curl -s -u $HARBOR_USER:$HARBOR_PASS \
                         "http://${HARBOR_URL}/api/v2.0/projects/${HARBOR_PROJECT}/repositories/${IMAGE_NAME}/artifacts/${IMAGE_TAG}/scan" \
                         -o trivy_report.txt
                    '''
                }
                archiveArtifacts artifacts: 'trivy_report.txt', fingerprint: true
            }
        }

    }

    post {
        always {
            echo "üßπ Cleaning up local images..."
            sh "docker rmi ${HARBOR_URL.replace('http://', '')}/${HARBOR_PROJECT}/${IMAGE_NAME}:${IMAGE_TAG} || true"
        }
        success {
            echo "‚úÖ Image pushed and scanned successfully in Harbor: ${HARBOR_URL}/${HARBOR_PROJECT}/${IMAGE_NAME}:${IMAGE_TAG}"
        }
        failure {
            echo "‚ùå Build failed. Check logs above."
        }
    }
}
