pipeline {
    agent any

    environment {
        HARBOR_URL = '192.168.1.179:80'
        HARBOR_PROJECT = 'devops'
        IMAGE_NAME = 'myapp-b'
        IMAGE_TAG = '1'
    }

    stages {

        stage('Docker Info Check') {
            steps {
                sh 'docker info'
            }
        }

        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                cd docker
                docker build -t ${HARBOR_URL}/${HARBOR_PROJECT}/${IMAGE_NAME}:${IMAGE_TAG} .
                '''
            }
        }

        stage('Login to Harbor') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'devops-test', usernameVariable: 'HARBOR_USER', passwordVariable: 'HARBOR_PASS')]) {
                    sh '''
                    echo $HARBOR_PASS | docker login ${HARBOR_URL} -u $HARBOR_USER --password-stdin
                    '''
                }
            }
        }

        stage('Push Image to Harbor') {
            steps {
                sh '''
                docker push ${HARBOR_URL}/${HARBOR_PROJECT}/${IMAGE_NAME}:${IMAGE_TAG}
                '''
            }
        }

        stage('Wait before Scan') {
            steps {
                echo '‚è≥ Waiting 10 seconds before starting scan...'
                sleep(time: 10, unit: 'SECONDS')  #it is a clean Jenkins syntax,Jenkins syntax is safer and clearer in pipeline logs.
            }
        }

        stage('Scan Image in Harbor with Trivy') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'devops-test', usernameVariable: 'HARBOR_USER', passwordVariable: 'HARBOR_PASS')]) {
                    sh '''
                    echo "üîç Triggering Trivy scan in Harbor..."
                    docker run --rm registry.goharbor.io/harbor-cli/harbor-cli:latest \
                        --url http://${HARBOR_URL} \
                        --username $HARBOR_USER \
                        --password $HARBOR_PASS \
                        artifact scan trigger ${HARBOR_PROJECT}/${IMAGE_NAME}:${IMAGE_TAG}

                    echo "üìÑ Fetching scan results..."
                    docker run --rm registry.goharbor.io/harbor-cli/harbor-cli:latest \
                        --url http://${HARBOR_URL} \
                        --username $HARBOR_USER \
                        --password $HARBOR_PASS \
                        artifact scan get ${HARBOR_PROJECT}/${IMAGE_NAME}:${IMAGE_TAG} > trivy_report.txt
                    '''
                }
                archiveArtifacts artifacts: 'trivy_report.txt', fingerprint: true
            }
        }
    }

    post {
        always {
            echo "üßπ Cleaning up local images..."
            sh "docker rmi ${HARBOR_URL}/${HARBOR_PROJECT}/${IMAGE_NAME}:${IMAGE_TAG} || true"
        }
        success {
            echo "‚úÖ Image pushed and scanned successfully: ${HARBOR_URL}/${HARBOR_PROJECT}/${IMAGE_NAME}:${IMAGE_TAG}"
        }
        failure {
            echo "‚ùå Build failed. Check logs above."
        }
    }
}
