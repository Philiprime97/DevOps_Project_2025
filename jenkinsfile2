pipeline {
    agent any

    environment {
        HARBOR_URL     = '192.168.1.179:80'
        HARBOR_PROJECT = 'devops'
        IMAGE_NAME     = 'myapp-b'
        IMAGE_TAG      = '1'
        CREDENTIALS_ID = 'devops-test'
    }

    stages {

        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Lint & Security Scan') {
            parallel {

                stage('Linting') {
                    steps {
                        sh '''
                        flake8 . > flake8-report.txt || true
                        if [ -f Dockerfile ]; then
                            docker run --rm -i hadolint/hadolint < Dockerfile >> flake8-report.txt 2>&1 || echo "Dockerfile issues" >> flake8-report.txt
                        fi
                        '''
                        archiveArtifacts artifacts: 'flake8-report.txt', fingerprint: true
                    }
                }

                stage('Scan Source Code') {
                    steps {
                        echo 'ðŸ”’ Scanning source code with Trivy and generating HTML...'
                        sh '''
                        wget -q -O html.tpl https://raw.githubusercontent.com/Philiprime97/DevOps_Project_2025/main/html.tpl
                        trivy fs . --severity UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL --format template --template "@html.tpl" -o trivy-source-report.html || true
                        '''
                        publishHTML([
                            reportDir: '.',
                            reportFiles: 'trivy-source-report.html',
                            reportName: 'Trivy Source Scan Report',
                            keepAll: true,
                            alwaysLinkToLastBuild: true,
                            allowMissing: true
                        ])
                    }
                }

            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                IMAGE_FULL="${HARBOR_URL}/${HARBOR_PROJECT}/${IMAGE_NAME}:${IMAGE_TAG}"
                cd docker
                docker build -t "$IMAGE_FULL" .
                '''
            }
        }

        stage('Scan Docker Image') {
            steps {
                echo 'ðŸ”’ Scanning Docker image with Trivy and generating HTML...'
                sh '''
                wget -q -O html.tpl https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl
                IMAGE_FULL="${HARBOR_URL}/${HARBOR_PROJECT}/${IMAGE_NAME}:${IMAGE_TAG}"
                trivy image --severity UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL --format template --template "@html.tpl" -o trivy-image-report.html "$IMAGE_FULL" || true
                '''
                publishHTML([
                    reportDir: '.',
                    reportFiles: 'trivy-image-report.html',
                    reportName: 'Trivy Docker Image Scan Report',
                    keepAll: true,
                    alwaysLinkToLastBuild: true,
                    allowMissing: true
                ])
            }
        }

        stage('Push Image to Harbor') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${CREDENTIALS_ID}", usernameVariable: 'HARBOR_USER', passwordVariable: 'HARBOR_PASS')]) {
                    sh '''
                    IMAGE_FULL="${HARBOR_URL}/${HARBOR_PROJECT}/${IMAGE_NAME}:${IMAGE_TAG}"
                    echo $HARBOR_PASS | docker login ${HARBOR_URL} -u $HARBOR_USER --password-stdin
                    docker push "$IMAGE_FULL"
                    '''
                }
            }
        }

    }

    post {
        always {
            sh '''
            IMAGE_FULL="${HARBOR_URL}/${HARBOR_PROJECT}/${IMAGE_NAME}:${IMAGE_TAG}"
            docker rmi "$IMAGE_FULL" || true
            '''
        }
    }
}
