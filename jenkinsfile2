pipeline {
    agent any

    environment {
        HARBOR_URL     = '192.168.1.179:80'
        HARBOR_PROJECT = 'devops'
        IMAGE_NAME     = 'myapp-b'
        IMAGE_TAG      = '1'
        CREDENTIALS_ID = 'devops-test'
    }

    stages {

        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Lint & Security Scan') {
            parallel {

                stage('Linting') {
                    steps {
                        sh '''
                        flake8 . > flake8-report.txt || true
                        if [ -f Dockerfile ]; then
                            docker run --rm -i hadolint/hadolint < Dockerfile >> flake8-report.txt 2>&1 || echo "Dockerfile issues" >> flake8-report.txt
                        fi
                        '''
                        archiveArtifacts artifacts: 'flake8-report.txt', fingerprint: true
                    }
                }

                stage('Scan Source Code') {
                    steps {
                        echo 'ðŸ”’ Scanning source code with Trivy...'
                        sh '''
                        # Scan filesystem, export table format
                        trivy fs . --severity HIGH,CRITICAL --format table -o trivy-report.txt || true
                        # Archive the report
                        cat trivy-report.txt
                        '''
                        archiveArtifacts artifacts: 'trivy-report.txt', fingerprint: true
                    }

            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                IMAGE_FULL="${HARBOR_URL#http://}/${HARBOR_PROJECT}/${IMAGE_NAME}:${IMAGE_TAG}"
                cd docker
                docker build -t "$IMAGE_FULL" .
                '''
            }
        }

        stage('Scan Docker Image') {
            steps {
                sh '''
                IMAGE_FULL="${HARBOR_URL#http://}/${HARBOR_PROJECT}/${IMAGE_NAME}:${IMAGE_TAG}"
                trivy image "$IMAGE_FULL" --severity HIGH,CRITICAL --format table -o trivy-image-report.txt || true
                cat trivy-image-report.txt
                '''
                archiveArtifacts artifacts: 'trivy-image-report.txt', fingerprint: true
            }
        }

        stage('Push Image to Harbor') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${CREDENTIALS_ID}", usernameVariable: 'HARBOR_USER', passwordVariable: 'HARBOR_PASS')]) {
                    sh '''
                    IMAGE_FULL="${HARBOR_URL#http://}/${HARBOR_PROJECT}/${IMAGE_NAME}:${IMAGE_TAG}"
                    echo $HARBOR_PASS | docker login ${HARBOR_URL} -u $HARBOR_USER --password-stdin
                    docker push "$IMAGE_FULL"
                    '''
                }
            }
        }

    }

    post {
        always {
            sh "docker rmi ${HARBOR_URL.replace('http://','')}/${HARBOR_PROJECT}/${IMAGE_NAME}:${IMAGE_TAG} || true"
        }
    }
}
