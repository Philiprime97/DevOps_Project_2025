pipeline {
    agent any

    environment {
        HARBOR_URL       = '192.168.1.179:80'
        HARBOR_PROJECT   = 'devops'
        IMAGE_NAME       = 'myapp-b'
        IMAGE_TAG        = '1'
        CREDENTIALS_ID   = 'devops-test'
        CRED_NAME        = 'jenkins-creds'
    }

    stages {

        stage('Docker Info Check') {
            steps {
                sh 'docker info'
            }
        }

        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('Parallel Checks') {
            parallel {

                stage('Linting') {
                    steps {
                        echo 'üßπ Running linting for Python, Shell, and Dockerfile...'
                        sh '''
                        # Python lint
                        flake8 . > flake8-report.txt || true

                        # Dockerfile lint
                        if [ -f Dockerfile ]; then
                            docker run --rm -i hadolint/hadolint < Dockerfile >> flake8-report.txt 2>&1 || echo "‚ö†Ô∏è Dockerfile issues" >> flake8-report.txt
                        fi
                        '''
                    }
                }

                stage('Security Scan (Source)') {
                    steps {
                        echo 'üîí Running Trivy scan on source code...'
                        sh '''
                        trivy fs . --severity HIGH,CRITICAL -f table --light -o trivy-report.txt || true
                        cat trivy-report.txt
                        '''
                        archiveArtifacts artifacts: 'trivy-report.txt', fingerprint: true
                    }
                }

            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh """
                    cd docker && \
                    docker build -t ${HARBOR_URL.replace('http://', '')}/${HARBOR_PROJECT}/${IMAGE_NAME}:${IMAGE_TAG} .
                    """
                }
            }
        }

        stage('Scan Docker Image') {
            steps {
                echo 'üîí Scanning Docker image for vulnerabilities...'
                sh """
                trivy image ${HARBOR_URL.replace('http://', '')}/${HARBOR_PROJECT}/${IMAGE_NAME}:${IMAGE_TAG} --severity HIGH,CRITICAL -f table --light -o trivy-image-report.txt
                """
                archiveArtifacts artifacts: 'trivy-image-report.txt', fingerprint: true
            }
        }

        stage('Login to Harbor') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${CREDENTIALS_ID}", usernameVariable: 'HARBOR_USER', passwordVariable: 'HARBOR_PASS')]) {
                    sh '''
                    echo $HARBOR_PASS | docker login ${HARBOR_URL} -u $HARBOR_USER --password-stdin
                    '''
                }
            }
        }

        stage('Push Image to Harbor') {
            steps {
                script {
                    sh """
                    docker push ${HARBOR_URL.replace('http://', '')}/${HARBOR_PROJECT}/${IMAGE_NAME}:${IMAGE_TAG}
                    """
                }
            }
        }

    }

    post {
        always {
            echo "üßπ Cleaning up local Docker images..."
            sh "docker rmi ${HARBOR_URL.replace('http://', '')}/${HARBOR_PROJECT}/${IMAGE_NAME}:${IMAGE_TAG} || true"
        }
        success {
            echo "‚úÖ Image pushed and scanned successfully: ${HARBOR_URL}/${HARBOR_PROJECT}/${IMAGE_NAME}:${IMAGE_TAG}"
        }
        failure {
            echo "‚ùå Build failed. Check logs above."
        }
    }
}
